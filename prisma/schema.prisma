generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Album {
  id          String   @id
  title       String
  description String
  release     DateTime
  colors      String[]
  musics      Music[]
  isMini      Boolean
}

enum CategoryType {
  PROGRAM
  REALITY
  OTHERS
}

enum CategoryOptions {
  MEMBERS
  EPISODE
}

model Category {
  id          String            @id
  title       String
  description String?
  type        CategoryType
  order       Int
  videos      Video[]
  options     CategoryOptions[]
}

enum VideoSource {
  YOUTUBE
}

model Music {
  id         String         @id
  title      String
  shortTitle String
  order      Int
  albumId    String?
  album      Album?         @relation(fields: [albumId], references: [id])
  playData   MusicPlayData?

  isPerformed Boolean
  isTitle     Boolean
  isMixable   Boolean

  anchor   Float?
  duration Float?

  sessions Session[]
}

model MusicPlayData {
  musicId   String @id
  music     Music  @relation(fields: [musicId], references: [id])
  youtubeId String
  lyrics    Json?
}

enum ScheduleType {
  ALBUM
  PROGRAM
  FANSIGN
  CONCERT
  RADIO
  OTHERS
}

model Schedule {
  id          String       @id
  title       String
  date        DateTime
  dateDetails String?
  type        ScheduleType
  members     String[]
  url         String?
  isAllDay    Boolean
}

enum SessionType {
  SHOWCASE
  FANSIGN
  PROGRAM
}

model Session {
  id      String      @id
  type    SessionType
  videos  Video[]
  program String?
  title   String
  date    DateTime
  music   Music?      @relation(fields: [musicId], references: [id])
  musicId String?
}

enum FeedType {
  TWITTER
  TIKTOK
  BSTAGE
  DAUM
}

model Feed {
  id       String   @id
  sourceId String
  type     FeedType
  title    String
  date     DateTime
  members  String[]
  media    Json[]

  @@unique([sourceId, type], name: "uniqueFeedId")
}

model Video {
  id         String      @id
  index      Int         @default(autoincrement())
  title      String
  source     VideoSource
  sourceId   String
  date       DateTime
  categories Category[]

  metaInfo MetaInfo?

  session   Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  sessionId String?
}

model MetaInfo {
  video             Video                  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId           String                 @id @unique
  shorts            ShortsMeta?
  link              LinkMeta?
  members           MembersMeta?
  episode           EpisodeMeta?
  cover             CoverMeta?
  stage             StageMeta?
  fancam            FancamMeta?
  music             MusicMeta?
  official          OfficialMeta?
  promotion         PromotionMeta?
  inboundChallenge  InboundChallengeMeta?
  outboundChallenge OutboundChallengeMeta?
  live              LiveMeta?
}

model ShortsMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
}

model LinkMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  videoId    String
}

model MembersMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  members    String[]
}

model EpisodeMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  episode    String?
  title      String
}

model CoverMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  kind       String
  title      String
}

model StageMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  sessionId  String
  tag        String
  time       Float
}

model FancamMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  sessionId  String
  ownerId    String
  embed      Boolean
}

model MusicMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  musicId    String
}

model OfficialMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  order      Int
  title      String
}

model PromotionMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  albumId    String
  order      Int
  title      String
}

model InboundChallengeMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  from       String?
}

model OutboundChallengeMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  music      String
  to         String?
}

model LiveMeta {
  metaInfo   MetaInfo @relation(fields: [metaInfoId], references: [videoId], onDelete: Cascade)
  metaInfoId String   @id
  disable    Boolean
}
